<?php

namespace Ulysse\Business\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function getUsers($page, $nbPerPage)
    {
        $role = 'ADMIN';
        $query = $this->createQueryBuilder('u')
                ->where('u.roles NOT LIKE :role')
                ->orderBy('u.username', 'ASC')
                ->setParameter('role', '%' . $role . '%');

        $query->setFirstResult(($page - 1) * $nbPerPage)
                ->setMaxResults($nbPerPage);

        return new Paginator($query, true);
    }
    
    public function getUsersBanned($page, $nbPerPage)
    {
        $role = 'ADMIN';
        $query = $this->createQueryBuilder('u')
                ->where('u.locked = true')
                ->andWhere('u.roles NOT LIKE :role')
                ->orderBy('u.username', 'ASC')
                ->setParameter('role', '%' . $role . '%');

        $query->setFirstResult(($page - 1) * $nbPerPage)
                ->setMaxResults($nbPerPage);

        return new Paginator($query, true);
    }
    
    public function getUsersBlocked($page, $nbPerPage)
    {
        $role = 'ADMIN';
        $query = $this->createQueryBuilder('u')
                ->where('u.blocked = true')
                ->andWhere('u.roles NOT LIKE :role')
                ->orderBy('u.username', 'ASC')
                ->setParameter('role', '%' . $role . '%');

        $query->setFirstResult(($page - 1) * $nbPerPage)
                ->setMaxResults($nbPerPage);

        return new Paginator($query, true);
    }

    public function countActifMembersToday()
    {
        $role = 'ADMIN';
        $qb = $this->_em->createQueryBuilder();
        $date = date('d-m-Y');
        $qb->select('count(u)')
                ->from('UlysseBusinessUserBundle:User', 'u')
                ->where('u.lastLogin >= '. $date)
                ->andWhere('u.roles NOT LIKE :role')
                ->setParameter('role', '%' . $role . '%');

        return $qb->getQuery()
                        ->getResult();
    }

    public function countAllMembers()
    {
        $role = 'ADMIN';
        $qb = $this->_em->createQueryBuilder();

        $qb->select('count(u)')
                ->from('UlysseBusinessUserBundle:User', 'u')
                ->where('u.roles NOT LIKE :role')
                ->setParameter('role', '%' . $role . '%');

        return $qb->getQuery()
                        ->getResult();
    }

    public function countBlockedMembers()
    {
        $role = 'ADMIN';
        $qb = $this->_em->createQueryBuilder();

        $qb->select('count(u)')
                ->from('UlysseBusinessUserBundle:User', 'u')
                ->where('u.blocked = true')
                ->andWhere('u.roles NOT LIKE :role')
                ->setParameter('role', '%' . $role . '%');

        return $qb->getQuery()
                        ->getResult();
    }

    public function countBannedMembers()
    {
        $role = 'ADMIN';
        $qb = $this->_em->createQueryBuilder();

        $qb->select('count(u)')
                ->from('UlysseBusinessUserBundle:User', 'u')
                ->where('u.locked = true')
                ->andWhere('u.roles NOT LIKE :role')
                ->setParameter('role', '%' . $role . '%');

        return $qb->getQuery()
                        ->getResult();
    }
}
