<?php

namespace Ulysse\Business\SupportBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * TicketRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TicketRepository extends EntityRepository
{
    public function getTicketsOpen($page, $nbPerPage)
    {
        $query = $this->createQueryBuilder('t')
                ->where('t.fenced = false')
                ->orderBy('t.date', 'DESC');

        $query->setFirstResult(($page - 1) * $nbPerPage)
                ->setMaxResults($nbPerPage);

        return new Paginator($query, true);
    }
    
    public function getTicketsFenced($page, $nbPerPage)
    {
        $query = $this->createQueryBuilder('t')
                ->andWhere('t.fenced = true')
                ->orderBy('t.date', 'DESC');

        $query->setFirstResult(($page - 1) * $nbPerPage)
                ->setMaxResults($nbPerPage);

        return new Paginator($query, true);
    }

    public function getTicketsNotSeen($page, $nbPerPage)
    {
        $query = $this->createQueryBuilder('t')
                ->andWhere('t.seen = false')
                ->orderBy('t.date', 'DESC');

        $query->setFirstResult(($page - 1) * $nbPerPage)
                ->setMaxResults($nbPerPage);

        return new Paginator($query, true);
    }

    public function getTicketsUntreated($page, $nbPerPage)
    {
        $query = $this->createQueryBuilder('t')
                ->leftJoin('t.response', 'r')
                ->where('r.ticket IS NULL')
                ->andWhere('t.fenced != 1')
                ->orderBy('t.date', 'DESC');

        $query->setFirstResult(($page - 1) * $nbPerPage)
                ->setMaxResults($nbPerPage);

        return new Paginator($query, true);
    }

    public function countTicketsOpen()
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('count(t)')
                ->from('UlysseBusinessSupportBundle:Ticket', 't')
                ->where('t.fenced = false');

        return $qb->getQuery()
                        ->getResult();
    }

    public function countTicketsFenced()
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('count(t)')
                ->from('UlysseBusinessSupportBundle:Ticket', 't')
                ->where('t.fenced = true');

        return $qb->getQuery()
                        ->getResult();
    }

    public function countNotSeenTickets()
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('count(t)')
                ->from('UlysseBusinessSupportBundle:Ticket', 't')
                ->andWhere('t.seen = false');

        return $qb->getQuery()
                        ->getResult();
    }

    public function countUnanswerableTickets()
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('count(t)')
                ->from('UlysseBusinessSupportBundle:Ticket', 't')
                ->leftJoin('t.response', 'r')
                ->where('r.ticket IS NULL')
                ->andWhere('t.fenced != 1');

        return $qb->getQuery()
                        ->getResult();
    }

}
